"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import asyncio
import hashlib
import secrets
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, Union
from decimal import Decimal, ROUND_HALF_UP

from .constants import (
    SERVICE_PRICES, 
    FREE_USAGE_LIMIT_HOURS, 
    STARS_TO_RUB_RATE,
    DEFAULT_TIMEZONE
)


def format_currency(amount: Union[float, Decimal], currency: str = "RUB") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
    if isinstance(amount, float):
        amount = Decimal(str(amount))
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    amount = amount.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
    
    if currency == "RUB":
        return f"{amount:.2f} ‚ÇΩ"
    elif currency == "STARS":
        return f"{int(amount)} ‚≠ê"
    else:
        return f"{amount:.2f} {currency}"


def calculate_service_price(category: str, subcategory: str) -> float:
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã —É—Å–ª—É–≥–∏"""
    if category not in SERVICE_PRICES:
        return 0.0
    
    if subcategory not in SERVICE_PRICES[category]:
        return 0.0
    
    return SERVICE_PRICES[category][subcategory]


def calculate_time_until_next_free_use(last_free_use: datetime) -> Optional[timedelta]:
    """
    –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    Returns:
        timedelta –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å, None –µ—Å–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    """
    if not last_free_use:
        return None
    
    now = datetime.utcnow()
    next_free_use = last_free_use + timedelta(hours=FREE_USAGE_LIMIT_HOURS)
    
    if now >= next_free_use:
        return None
    
    return next_free_use - now


def format_time_remaining(td: timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
    total_seconds = int(td.total_seconds())
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    
    if hours > 0:
        return f"{hours} —á. {minutes} –º–∏–Ω."
    else:
        return f"{minutes} –º–∏–Ω."


def convert_stars_to_rubles(stars: int) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Telegram Stars –≤ —Ä—É–±–ª–∏"""
    return stars * STARS_TO_RUB_RATE


def convert_rubles_to_stars(rubles: float) -> int:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä—É–±–ª–µ–π –≤ Telegram Stars"""
    return int(rubles / STARS_TO_RUB_RATE)


def generate_payment_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞"""
    timestamp = str(int(datetime.utcnow().timestamp()))
    random_part = secrets.token_hex(8)
    return f"pay_{timestamp}_{random_part}"


def generate_order_id() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞–∫–∞–∑–∞"""
    timestamp = str(int(datetime.utcnow().timestamp()))
    random_part = secrets.token_hex(4)
    return f"order_{timestamp}_{random_part}"


def create_payment_hash(payment_data: Dict[str, Any], secret_key: str) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞
    sorted_items = sorted(payment_data.items())
    data_string = "&".join([f"{k}={v}" for k, v in sorted_items])
    data_string += f"&secret={secret_key}"
    
    return hashlib.sha256(data_string.encode()).hexdigest()


def verify_payment_hash(payment_data: Dict[str, Any], received_hash: str, secret_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    expected_hash = create_payment_hash(payment_data, secret_key)
    return secrets.compare_digest(expected_hash, received_hash)


def format_user_info(user_data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    lines = []
    
    if user_data.get('username'):
        lines.append(f"üë§ –ò–º—è: {user_data['username']}")
    
    if user_data.get('telegram_id'):
        lines.append(f"üÜî Telegram ID: {user_data['telegram_id']}")
    
    if user_data.get('balance') is not None:
        lines.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_currency(user_data['balance'])}")
    
    if user_data.get('created_at'):
        created_date = user_data['created_at'].strftime('%d.%m.%Y')
        lines.append(f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {created_date}")
    
    return "\n".join(lines)


def format_service_info(category: str, subcategory: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ"""
    from .constants import SERVICE_CATEGORIES, SERVICE_SUBCATEGORIES
    
    category_name = SERVICE_CATEGORIES.get(category, category)
    subcategory_name = SERVICE_SUBCATEGORIES.get(category, {}).get(subcategory, subcategory)
    price = calculate_service_price(category, subcategory)
    
    return f"{category_name} ‚Üí {subcategory_name}\nüí∞ –¶–µ–Ω–∞: {format_currency(price)}"


def extract_file_id_from_message(message_data: Dict[str, Any]) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ file_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if 'voice' in message_data and message_data['voice'].get('file_id'):
        return message_data['voice']['file_id']
    
    if 'audio' in message_data and message_data['audio'].get('file_id'):
        return message_data['audio']['file_id']
    
    return None


def create_callback_data(prefix: str, **kwargs) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ callback data"""
    parts = [prefix]
    for key, value in kwargs.items():
        parts.append(f"{key}:{value}")
    
    data = "|".join(parts)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç Telegram (64 –±–∞–π—Ç–∞)
    if len(data.encode('utf-8')) > 64:
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        truncated = data[:60] + "..."
        return truncated
    
    return data


def parse_callback_data(data: str) -> Dict[str, str]:
    """–ü–∞—Ä—Å–∏–Ω–≥ callback data"""
    parts = data.split("|")
    result = {"prefix": parts[0]}
    
    for part in parts[1:]:
        if ":" in part:
            key, value = part.split(":", 1)
            result[key] = value
    
    return result


async def safe_delete_message(bot, chat_id: int, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        return True
    except Exception:
        return False


async def retry_async_operation(
    operation,
    max_retries: int = 3,
    delay: float = 1.0,
    backoff_factor: float = 2.0
) -> Any:
    """–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
    last_exception = None
    
    for attempt in range(max_retries):
        try:
            return await operation()
        except Exception as e:
            last_exception = e
            if attempt < max_retries - 1:
                await asyncio.sleep(delay * (backoff_factor ** attempt))
    
    raise last_exception


def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix


def get_current_moscow_time() -> datetime:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ"""
    from datetime import timezone
    moscow_tz = timezone(timedelta(hours=3))
    return datetime.now(moscow_tz)


def format_datetime(dt: datetime, format_str: str = "%d.%m.%Y %H:%M") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if dt.tzinfo is None:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_tz = timezone(timedelta(hours=3))
        dt = dt.replace(tzinfo=moscow_tz)
    
    return dt.strftime(format_str)