"""
–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
"""

from typing import Any

from aiogram import F
from aiogram.types import Message, CallbackQuery, Voice
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import MessageInput
from aiogram_dialog.widgets.kbd import Button, Back, Cancel, Group, Select
from aiogram_dialog.widgets.common import WhenCondition

from ...states.service import ServiceStates
from ...utils import (
    SERVICE_CATEGORIES, 
    SERVICE_SUBCATEGORIES, 
    calculate_service_price,
    format_currency,
    validate_voice_duration,
    validate_voice_file_size,
    MESSAGES
)


async def get_categories(**kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    categories = []
    for category_id, category_name in SERVICE_CATEGORIES.items():
        categories.append({
            "id": category_id,
            "name": category_name
        })
    
    return {"categories": categories}


async def get_subcategories(**kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    dialog_manager: DialogManager = kwargs["dialog_manager"]
    selected_category = dialog_manager.dialog_data.get("selected_category")
    
    subcategories = []
    if selected_category and selected_category in SERVICE_SUBCATEGORIES:
        for subcat_id, subcat_name in SERVICE_SUBCATEGORIES[selected_category].items():
            price = calculate_service_price(selected_category, subcat_id)
            subcategories.append({
                "id": subcat_id,
                "name": subcat_name,
                "price": format_currency(price)
            })
    
    return {
        "subcategories": subcategories,
        "category_name": SERVICE_CATEGORIES.get(selected_category, "")
    }


async def category_selected(
    callback: CallbackQuery,
    select,
    dialog_manager: DialogManager,
    item_id: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    dialog_manager.dialog_data["selected_category"] = item_id
    await dialog_manager.next()


async def subcategory_selected(
    callback: CallbackQuery,
    select,
    dialog_manager: DialogManager,
    item_id: str
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    dialog_manager.dialog_data["selected_subcategory"] = item_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from ...services.user_service import UserService
    from ...services.balance_service import BalanceService
    
    user_service = UserService()
    balance_service = BalanceService()
    
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    category = dialog_manager.dialog_data["selected_category"]
    price = calculate_service_price(category, item_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    can_use, error_msg = await balance_service.can_use_service(user.id, price)
    
    if not can_use:
        await callback.message.answer(f"‚ùå {error_msg}")
        return
    
    await dialog_manager.next()


async def voice_handler(
    message: Message,
    message_input,
    dialog_manager: DialogManager,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message.voice:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    voice: Voice = message.voice
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if not validate_voice_file_size(voice.file_size):
        await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if not validate_voice_duration(voice.duration):
        from ...utils import MAX_VOICE_DURATION
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º: {MAX_VOICE_DURATION} —Å–µ–∫.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    dialog_manager.dialog_data.update({
        "voice_file_id": voice.file_id,
        "voice_duration": voice.duration,
        "voice_file_size": voice.file_size
    })
    
    await dialog_manager.next()


async def confirm_service(
    callback: CallbackQuery,
    button,
    dialog_manager: DialogManager,
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏"""
    from ...services.user_service import UserService
    from ...services.voice_service import VoiceService
    from ...tasks.voice_processing import process_voice_message
    
    user_service = UserService()
    voice_service = VoiceService()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
    category = dialog_manager.dialog_data["selected_category"]
    subcategory = dialog_manager.dialog_data["selected_subcategory"]
    voice_file_id = dialog_manager.dialog_data["voice_file_id"]
    voice_duration = dialog_manager.dialog_data["voice_duration"]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        voice_request = await voice_service.create_voice_request(
            user_id=user.id,
            category=category,
            subcategory=subcategory,
            voice_file_id=voice_file_id,
            voice_duration=voice_duration
        )
        
        if voice_request:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
            await process_voice_message.kiq(voice_request.id)
            
            await callback.message.answer(
                f"{MESSAGES['voice_processing']}\n\n"
                f"üìù –ó–∞—è–≤–∫–∞ ‚Ññ{voice_request.id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
            )
            
            await dialog_manager.done()
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞")
    
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"Service confirmation error: {e}")


async def get_service_summary(**kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    dialog_manager: DialogManager = kwargs["dialog_manager"]
    
    category = dialog_manager.dialog_data.get("selected_category")
    subcategory = dialog_manager.dialog_data.get("selected_subcategory")
    voice_duration = dialog_manager.dialog_data.get("voice_duration", 0)
    
    if not category or not subcategory:
        return {}
    
    category_name = SERVICE_CATEGORIES.get(category, "")
    subcategory_name = SERVICE_SUBCATEGORIES.get(category, {}).get(subcategory, "")
    price = calculate_service_price(category, subcategory)
    
    return {
        "category_name": category_name,
        "subcategory_name": subcategory_name,
        "price": format_currency(price),
        "voice_duration": f"{voice_duration} —Å–µ–∫."
    }


# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
category_window = Window(
    Const("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏:"),
    Group(
        Select(
            Format("{item[name]}"),
            id="category_select",
            item_id_getter=lambda item: item["id"],
            items="categories",
            on_click=category_selected,
        ),
        width=1,
    ),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
    getter=get_categories,
    state=ServiceStates.select_category,
)

# –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
subcategory_window = Window(
    Format("üéØ {category_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:"),
    Group(
        Select(
            Format("{item[name]} - {item[price]}"),
            id="subcategory_select", 
            item_id_getter=lambda item: item["id"],
            items="subcategories",
            on_click=subcategory_selected,
        ),
        width=1,
    ),
    Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
    getter=get_subcategories,
    state=ServiceStates.select_subcategory,
)

# –û–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
voice_upload_window = Window(
    Const("üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n"
          "üìù –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —Ä–∞–∑–±–æ—Ä—á–∏–≤–æ\n"
          "‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–∏–Ω—É—Ç—ã\n"
          "üìÅ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë"),
    MessageInput(voice_handler, content_types=[F.voice]),
    Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
    state=ServiceStates.upload_voice,
)

# –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirmation_window = Window(
    Format("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:\n\n"
           "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
           "üéØ –£—Å–ª—É–≥–∞: {subcategory_name}\n"
           "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}\n"
           "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {voice_duration}\n\n"
           "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"),
    Button(
        Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
        id="confirm_service",
        on_click=confirm_service,
    ),
    Back(Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")),
    Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")),
    getter=get_service_summary,
    state=ServiceStates.confirmation,
)

# –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
service_selection_dialog = Dialog(
    category_window,
    subcategory_window,
    voice_upload_window,
    confirmation_window,
)