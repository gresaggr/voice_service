from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from decimal import Decimal
from datetime import datetime, timedelta
import logging

from app.bot.keyboards.inline import (
    get_service_categories_keyboard,
    get_service_subcategories_keyboard,
    get_main_menu_keyboard,
    get_service_confirmation_keyboard
)
from app.bot.states.service import ServiceStates
from app.database.models import ServiceCategory, ServiceSubcategory
from app.services.user_service import UserService
from app.services.voice_service import VoiceService
from app.services.balance_service import BalanceService
from app.database.engine import db_manager
from app.tasks.voice_processing import process_voice_message
from app.config import settings

service_router = Router()
logger = logging.getLogger(__name__)


@service_router.callback_query(F.data == "service_start")
async def service_start_handler(callback: CallbackQuery, state: FSMContext):
    """Start service usage."""

    service_text = (
        "üéØ <b>–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:"
    )

    await callback.message.edit_text(
        service_text,
        reply_markup=get_service_categories_keyboard()
    )
    await state.set_state(ServiceStates.selecting_main_category)
    await callback.answer()


@service_router.callback_query(F.data.startswith("category_"))
async def category_selected_handler(callback: CallbackQuery, state: FSMContext):
    """Handle category selection."""

    category_value = callback.data.split("_", 1)[1]
    category = ServiceCategory(category_value)

    await state.update_data(category=category)

    voice_service = VoiceService(None)
    category_desc = voice_service.get_category_description(category)

    subcategory_text = (
        f"üé® <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_desc}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    )

    await callback.message.edit_text(
        subcategory_text,
        reply_markup=get_service_subcategories_keyboard(category)
    )
    await state.set_state(ServiceStates.selecting_subcategory)
    await callback.answer()


@service_router.callback_query(F.data.startswith("subcategory_"))
async def subcategory_selected_handler(callback: CallbackQuery, state: FSMContext, user: any):
    """Handle subcategory selection."""

    subcategory_value = callback.data.split("_", 1)[1]
    subcategory = ServiceSubcategory(subcategory_value)

    await state.update_data(subcategory=subcategory)

    # Check if user can use the service
    async with db_manager.get_session() as session:
        user_service = UserService(session)
        can_use_free = await user_service.can_use_free_service(user)
        time_until_free = await user_service.get_time_until_free_usage(user)

        voice_service = VoiceService(session)
        subcategory_desc = voice_service.get_subcategory_description(subcategory)

    service_cost = Decimal(str(settings.service_cost))

    if user.balance >= service_cost:
        # User can pay
        cost_text = (
            f"üéØ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory_desc}\n\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service_cost} ‚ÇΩ\n"
            f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.balance} ‚ÇΩ\n\n"
            "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            f"‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.max_voice_duration} —Å–µ–∫."
        )
    elif can_use_free:
        # User can use free service
        cost_text = (
            f"üéØ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory_desc}\n\n"
            f"üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>\n"
            f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.balance} ‚ÇΩ\n\n"
            "üì§ –ü—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            f"‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.max_voice_duration} —Å–µ–∫.\n\n"
            f"‚ÑπÔ∏è –°–ª–µ–¥—É—é—â–µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {settings.free_usage_hours} —á–∞—Å–æ–≤"
        )
    else:
        # User cannot use service
        hours_left = int(time_until_free.total_seconds() // 3600) + 1
        minutes_left = int((time_until_free.total_seconds() % 3600) // 60)

        if hours_left > 0:
            time_text = f"{hours_left} —á. {minutes_left} –º–∏–Ω."
        else:
            time_text = f"{minutes_left} –º–∏–Ω."

        cost_text = (
            f"üéØ <b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {subcategory_desc}\n\n"
            f"‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n"
            f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {service_cost} ‚ÇΩ\n"
            f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.balance} ‚ÇΩ\n\n"
            f"‚è∞ –î–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: <b>{time_text}</b>\n\n"
            "üíé –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        )

        await callback.message.edit_text(
            cost_text,
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await callback.answer()
        return

    await callback.message.edit_text(
        cost_text,
        reply_markup=get_service_confirmation_keyboard()
    )
    await state.set_state(ServiceStates.waiting_voice)
    await callback.answer()


@service_router.callback_query(F.data == "service_confirm")
async def service_confirm_handler(callback: CallbackQuery, state: FSMContext):
    """Confirm service usage."""

    confirm_text = (
        "üéô <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        f"‚è± –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.max_voice_duration} —Å–µ–∫.\n"
        f"üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(settings.supported_formats)}\n"
        f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size // (1024 * 1024)} –ú–ë\n\n"
        "üí° –î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ"
    )

    await callback.message.edit_text(
        confirm_text,
        reply_markup=None
    )
    await callback.answer()


@service_router.callback_query(F.data == "service_cancel")
async def service_cancel_handler(callback: CallbackQuery, state: FSMContext):
    """Cancel service usage."""

    await callback.message.edit_text(
        "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã! üòä",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()


@service_router.message(ServiceStates.waiting_for_voice_message, F.voice)
async def voice_message_handler(message: Message, state: FSMContext, user: any):
    """Handle voice message."""

    try:
        # Get state data
        data = await state.get_data()
        category = data.get('category')
        subcategory = data.get('subcategory')

        if not category or not subcategory:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            return

        # Check voice duration
        if message.voice.duration > settings.max_voice_duration:
            await message.answer(
                f"‚ùå <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.max_voice_duration} —Å–µ–∫.\n"
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.voice.duration} —Å–µ–∫.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            return

        # Check file size
        if message.voice.file_size > settings.max_file_size:
            await message.answer(
                f"‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π</b>\n\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {settings.max_file_size // (1024 * 1024)} –ú–ë\n"
                f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {message.voice.file_size // (1024 * 1024)} –ú–ë\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
            )
            return

        async with db_manager.get_session() as session:
            user_service = UserService(session)
            balance_service = BalanceService(session)

            service_cost = Decimal(str(settings.service_cost))
            can_use_free = await user_service.can_use_free_service(user)

            # Check payment again
            if user.balance >= service_cost:
                # Deduct payment
                await balance_service.deduct_balance(user.id, service_cost, "Service usage")
                payment_type = "paid"
                logger.info(f"User {user.id} used paid service for {service_cost}")
            elif can_use_free:
                # Mark free usage
                await user_service.mark_free_usage(user)
                payment_type = "free"
                logger.info(f"User {user.id} used free service")
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
                    reply_markup=get_main_menu_keyboard()
                )
                await state.clear()
                return

        # Send processing message
        processing_msg = await message.answer(
            "‚è≥ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...</b>\n\n"
            "üéô –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "‚ö° –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )

        # Start voice processing task
        task_data = {
            "user_id": user.id,
            "telegram_user_id": user.telegram_id,
            "file_id": message.voice.file_id,
            "file_unique_id": message.voice.file_unique_id,
            "duration": message.voice.duration,
            "file_size": message.voice.file_size,
            "category": category.value,
            "subcategory": subcategory.value,
            "payment_type": payment_type,
            "processing_msg_id": processing_msg.message_id,
            "chat_id": message.chat.id
        }

        # Send to queue
        await process_voice_message.kiq(**task_data)

        logger.info(f"Voice processing task queued for user {user.id}")

    except Exception as e:
        logger.error(f"Error in voice message handler: {e}", exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        await state.clear()


@service_router.message(ServiceStates.waiting_for_voice_message, ~F.voice)
async def invalid_voice_handler(message: Message):
    """Handle invalid message when waiting for voice."""

    await message.answer(
        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "üí° –î–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –≤ Telegram."
    )


@service_router.callback_query(F.data == "back_to_categories")
async def back_to_categories_handler(callback: CallbackQuery, state: FSMContext):
    """Go back to categories selection."""

    await service_start_handler(callback, state)


@service_router.callback_query(F.data == "back_to_subcategories")
async def back_to_subcategories_handler(callback: CallbackQuery, state: FSMContext):
    """Go back to subcategories selection."""

    data = await state.get_data()
    category = data.get('category')

    if not category:
        await service_start_handler(callback, state)
        return

    await category_selected_handler(callback, state)
