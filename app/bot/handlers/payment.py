from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from decimal import Decimal, InvalidOperation

from app.bot.keyboards.inline import (
    get_payment_amounts_keyboard,
    get_payment_methods_keyboard,
    get_main_menu_keyboard
)
from app.bot.states.payment import PaymentStates
from app.database.models import PaymentMethod
from app.services.payment_service import PaymentService
from app.database.engine import db_manager
from app.config import settings

payment_router = Router()


@payment_router.callback_query(F.data == "payment_start")
async def payment_start_handler(callback: CallbackQuery, state: FSMContext):
    """Start payment process."""
    
    payment_text = (
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {settings.service_cost} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_amounts_keyboard()
    )
    await state.set_state(PaymentStates.selecting_amount)
    await callback.answer()


@payment_router.callback_query(F.data.startswith("payment_amount_"))
async def amount_selected_handler(callback: CallbackQuery, state: FSMContext):
    """Handle amount selection."""
    
    amount_str = callback.data.split("_", 2)[2]
    amount = Decimal(amount_str)
    
    await state.update_data(amount=amount)
    
    method_text = (
        f"üí≥ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {amount} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    )
    
    await callback.message.edit_text(
        method_text,
        reply_markup=get_payment_methods_keyboard(amount)
    )
    await state.set_state(PaymentStates.selecting_payment_method)
    await callback.answer()


@payment_router.callback_query(F.data == "payment_custom_amount")
async def custom_amount_handler(callback: CallbackQuery, state: FSMContext):
    """Handle custom amount input."""
    
    await callback.message.edit_text(
        "üí∞ <b>–í–≤–æ–¥ —Å—É–º–º—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 10 –¥–æ 10000 —Ä—É–±–ª–µ–π):"
    )
    await state.set_state(PaymentStates.entering_custom_amount)
    await callback.answer()


@payment_router.message(PaymentStates.entering_custom_amount)
async def custom_amount_input_handler(message: Message, state: FSMContext):
    """Process custom amount input."""
    
    try:
        amount = Decimal(message.text.replace(",", "."))
        
        if amount < 10 or amount > 10000:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 10000 —Ä—É–±–ª–µ–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        await state.update_data(amount=amount)
        
        method_text = (
            f"üí≥ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {amount} ‚ÇΩ\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
        
        await message.answer(
            method_text,
            reply_markup=get_payment_methods_keyboard(amount)
        )
        await state.set_state(PaymentStates.selecting_payment_method)
        
    except (InvalidOperation, ValueError):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 10000:"
        )


@payment_router.callback_query(F.data.startswith("payment_method_"))
async def method_selected_handler(callback: CallbackQuery, state: FSMContext, user: any):
    """Handle payment method selection."""
    
    parts = callback.data.split("_")
    method = PaymentMethod(parts[2])
    amount = Decimal(parts[3])
    
    await state.update_data(method=method, amount=amount)
    
    async with db_manager.get_session() as session:
        payment_service = PaymentService(session)
        
        try:
            payment = await payment_service.create_payment(
                user_id=user.id,
                amount=amount,
                method=method
            )
            
            if method == PaymentMethod.YOOMONEY:
                # Create YooMoney payment
                payment_url = await payment_service.create_yoomoney_payment(payment)
                
                if payment_url:
                    payment_text = (
                        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooMoney</b>\n\n"
                        f"üí∞ <b>–°—É–º–º–∞:</b> {amount} ‚ÇΩ\n"
                        f"üÜî <b>–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞:</b> #{payment.id}\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
                    )
                    
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                                            callback_data=f"check_payment_{payment.id}")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                else:
                    payment_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    keyboard = get_main_menu_keyboard()
                    
            elif method == PaymentMethod.TELEGRAM_STARS:
                # Create Telegram Stars payment
                success = await payment_service.create_telegram_stars_payment(payment)
                
                if success:
                    payment_text = (
                        f"‚≠ê <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars</b>\n\n"
                        f"üí∞ <b>–°—É–º–º–∞:</b> {amount} ‚≠ê\n"
                        f"üÜî <b>–ù–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞:</b> #{payment.id}\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É Telegram –¥–ª—è –æ–ø–ª–∞—Ç—ã."
                    )
                    
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                                            callback_data=f"check_payment_{payment.id}")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                else:
                    payment_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    keyboard = get_main_menu_keyboard()
                    
        except Exception as e:
            payment_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"
            keyboard = get_main_menu_keyboard()
    
    await callback.message.edit_text(payment_text, reply_markup=keyboard)
    await state.clear()
    await callback.answer()


@payment_router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_handler(callback: CallbackQuery, user: any):
    """Check payment status."""
    
    payment_id = int(callback.data.split("_")[2])
    
    async with db_manager.get_session() as session:
        payment_service = PaymentService(session)
        
        payment = await payment_service.get_payment(payment_id)
        if not payment or payment.user_id != user.id:
            await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # Check payment status
        updated_payment = await payment_service.check_payment_status(payment)
        
        if updated_payment.status.value == "success":
            status_text = (
                f"‚úÖ <b>–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {updated_payment.amount} ‚ÇΩ\n"
                f"üí≥ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞:</b> {updated_payment.amount} ‚ÇΩ\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º!"
            )
        elif updated_payment.status.value == "failed":
            status_text = (
                f"‚ùå <b>–ü–ª–∞—Ç—ë–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂."
            )
        elif updated_payment.status.value == "cancelled":
            status_text = (
                f"üö´ <b>–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂."
            )
        else:
            status_text = (
                f"‚è≥ <b>–ü–ª–∞—Ç—ë–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤."
            )
    
    await callback.message.edit_text(status_text, reply_markup=get_main_menu_keyboard())
    await callback.answer()


@payment_router.callback_query(F.data == "back_to_amounts")
async def back_to_amounts_handler(callback: CallbackQuery, state: FSMContext):
    """Return to amount selection."""
    
    payment_text = (
        "üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {settings.service_cost} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_amounts_keyboard()
    )
    await state.set_state(PaymentStates.selecting_amount)
    await callback.answer()