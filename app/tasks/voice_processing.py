import asyncio
import random
from datetime import datetime

from app.tasks.broker import broker
from app.database.engine import db_manager
from app.database.models import RequestStatus, ServiceCategory, ServiceSubcategory
from app.services.voice_service import VoiceService
from app.services.user_service import UserService


@broker.task
async def process_voice_message(request_id: int, bot_token: str):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db_manager.engine:
        db_manager.init_engine()
    
    async with db_manager.get_session() as session:
        voice_service = VoiceService(session)
        user_service = UserService(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = await voice_service.get_request(request_id)
        if not request:
            print(f"Request {request_id} not found")
            return
        
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
            await voice_service.update_request_status(
                request_id, 
                RequestStatus.PROCESSING
            )
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            # 1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Bot API
            # 2. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            # 3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Speech-to-Text)
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
            # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (20-60 —Å–µ–∫—É–Ω–¥)
            processing_time = random.randint(20, 60)
            await asyncio.sleep(processing_time)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            processed_text = await _mock_speech_recognition(request)
            response_text = await _mock_processing_response(
                request.category, 
                request.subcategory, 
                processed_text
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await voice_service.update_request_status(
                request_id,
                RequestStatus.COMPLETED,
                processed_text=processed_text,
                response_text=response_text
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ
            if request.is_free:
                await user_service.mark_free_usage(request.user_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await _send_result_to_user(bot_token, request, response_text)
            
            print(f"Request {request_id} processed successfully")
            
        except Exception as e:
            print(f"Error processing request {request_id}: {e}")
            
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π
            await voice_service.update_request_status(
                request_id,
                RequestStatus.FAILED,
                response_text=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            if not request.is_free:
                await user_service.update_balance(request.user_id, request.cost)


async def _mock_speech_recognition(request) -> str:
    """–ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏."""
    mock_texts = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞? –•–æ—Ç–µ–ª –æ–±—Å—É–¥–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç.",
        "–ù—É–∂–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É –∏ –ø–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ.",
        "–ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–æ–º.",
        "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 8-800-123-45-67, –∞–¥—Ä–µ—Å —É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞ –¥–æ–º 15."
    ]
    return random.choice(mock_texts)


async def _mock_processing_response(
    category: ServiceCategory,
    subcategory: ServiceSubcategory, 
    text: str
) -> str:
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    
    if category == ServiceCategory.ARTISTIC:
        if subcategory == ServiceSubcategory.DIALOGS:
            return f"üé≠ –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞:\n\n" \
                   f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –∫—Ä–∞—Å–∏–≤—ã–π –¥–∏–∞–ª–æ–≥:\n" \
                   f"‚Äî {text}\n‚Äî –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –î–∞–≤–∞–π—Ç–µ —ç—Ç–æ –æ–±—Å—É–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        
        elif subcategory == ServiceSubcategory.NATURE:
            return f"üåø –ü—Ä–∏—Ä–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n" \
                   f"–í–∞—à–∏ —Å–ª–æ–≤–∞ –∑–≤—É—á–∞—Ç –∫–∞–∫ —à—ë–ø–æ—Ç –ª–µ—Å–∞: '{text}'\n" \
                   f"–°–ª–æ–≤–Ω–æ –≤–µ—Ç–µ—Ä –Ω–µ—Å—ë—Ç —ç—Ç–∏ –º—ã—Å–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—è –∏ –ª—É–≥–∞..."
        
        elif subcategory == ServiceSubcategory.POETRY:
            return f"üìú –ü–æ—ç—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:\n\n" \
                   f"–ò–∑ –≤–∞—à–∏—Ö —Å–ª–æ–≤ —Ä–æ–¥–∏–ª–∏—Å—å —Å—Ç—Ä–æ–∫–∏:\n" \
                   f"'{text[:30]}...'\n" \
                   f"–ö–∞–∫ –º—É–∑—ã–∫–∞ –¥—É—à–∏, —á—Ç–æ —Å–µ—Ä–¥—Ü–µ —Ç—Ä–æ–≥–∞–µ—Ç..."
    
    elif category == ServiceCategory.BUSINESS:
        if subcategory == ServiceSubcategory.AGREEMENTS:
            return f"ü§ù –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–ª–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n\n" \
                   f"–ü–†–ï–î–ú–ï–¢: –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n" \
                   f"–°–û–î–ï–†–ñ–ê–ù–ò–ï: {text}\n" \
                   f"–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        elif subcategory == ServiceSubcategory.PRESENTATIONS:
            return f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:\n\n" \
                   f"1. –í–≤–µ–¥–µ–Ω–∏–µ: {text[:50]}...\n" \
                   f"2. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: –†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ–º—ã\n" \
                   f"3. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ: –í—ã–≤–æ–¥—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    
    elif category == ServiceCategory.NUMBERS:
        if subcategory == ServiceSubcategory.PHONE_NUMBERS:
            import re
            phones = re.findall(r'\d[\d\-\(\)\s]{7,}', text)
            if phones:
                return f"üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n" + \
                       "\n".join([f"‚Ä¢ {phone}" for phone in phones])
            else:
                return f"üìû –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.\n" \
                       f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}"
        
        elif subcategory == ServiceSubcategory.ROUTES:
            return f"üó∫Ô∏è –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞:\n\n" \
                   f"–û–ø–∏—Å–∞–Ω–∏–µ: {text}\n" \
                   f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n" \
                   f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 30-45 –º–∏–Ω—É—Ç"
    
    # –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    return f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n" \
           f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}\n\n" \
           f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.value}\n" \
           f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.value}"


async def _send_result_to_user(bot_token: str, request, response_text: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API."""
    import httpx
    
    try:
        user = request.user if hasattr(request, 'user') else None
        if not user:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
            async with db_manager.get_session() as session:
                user_service = UserService(session)
                user = await user_service.get_by_id(request.user_id)
        
        if user:
            async with httpx.AsyncClient() as client:
                await client.post(
                    f"https://api.telegram.org/bot{bot_token}/sendMessage",
                    json={
                        "chat_id": user.telegram_id,
                        "text": f"üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n{response_text}",
                        "parse_mode": "HTML"
                    }
                )
    except Exception as e:
        print(f"Error sending result to user: {e}")