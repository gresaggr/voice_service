from datetime import datetime
from decimal import Decimal
from typing import Optional

from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import (
    ServiceRequest, RequestStatus, ServiceCategory, ServiceSubcategory, User
)
from app.config import settings


class VoiceService:
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def create_service_request(
        self,
        user_id: int,
        category: ServiceCategory,
        subcategory: ServiceSubcategory,
        voice_file_id: str,
        voice_duration: int,
        is_free: bool = False
    ) -> ServiceRequest:
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        
        cost = Decimal("0.00") if is_free else Decimal(str(settings.service_cost))
        
        service_request = ServiceRequest(
            user_id=user_id,
            category=category,
            subcategory=subcategory,
            voice_file_id=voice_file_id,
            voice_duration=voice_duration,
            cost=cost,
            is_free=is_free,
            status=RequestStatus.PENDING
        )
        
        self.session.add(service_request)
        await self.session.flush()
        await self.session.refresh(service_request)
        
        return service_request
    
    async def get_request(self, request_id: int) -> Optional[ServiceRequest]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ ID."""
        result = await self.session.execute(
            select(ServiceRequest).where(ServiceRequest.id == request_id)
        )
        return result.scalar_one_or_none()
    
    async def update_request_status(
        self,
        request_id: int,
        status: RequestStatus,
        processed_text: Optional[str] = None,
        response_text: Optional[str] = None
    ) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞."""
        
        update_data = {
            'status': status,
            'updated_at': datetime.utcnow()
        }
        
        if status == RequestStatus.PROCESSING:
            update_data['processing_started_at'] = datetime.utcnow()
        elif status in [RequestStatus.COMPLETED, RequestStatus.FAILED]:
            update_data['processing_completed_at'] = datetime.utcnow()
        
        if processed_text is not None:
            update_data['processed_text'] = processed_text
        
        if response_text is not None:
            update_data['response_text'] = response_text
        
        result = await self.session.execute(
            update(ServiceRequest)
            .where(ServiceRequest.id == request_id)
            .values(**update_data)
        )
        
        return result.rowcount > 0
    
    async def get_user_requests(
        self,
        user_id: int,
        limit: int = 10
    ) -> list[ServiceRequest]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        result = await self.session.execute(
            select(ServiceRequest)
            .where(ServiceRequest.user_id == user_id)
            .order_by(ServiceRequest.created_at.desc())
            .limit(limit)
        )
        return result.scalars().all()
    
    async def get_pending_requests(self, limit: int = 100) -> list[ServiceRequest]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å—ã."""
        result = await self.session.execute(
            select(ServiceRequest)
            .where(ServiceRequest.status == RequestStatus.PENDING)
            .order_by(ServiceRequest.created_at.asc())
            .limit(limit)
        )
        return result.scalars().all()
    
    @staticmethod
    def get_category_description(category: ServiceCategory) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        descriptions = {
            ServiceCategory.ARTISTIC: "üé® –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
            ServiceCategory.BUSINESS: "üíº –ë–∏–∑–Ω–µ—Å-–æ–±—Ä–∞–±–æ—Ç–∫–∞", 
            ServiceCategory.NUMBERS: "üî¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä –∏ –¥–∞–Ω–Ω—ã—Ö"
        }
        return descriptions.get(category, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    @staticmethod
    def get_subcategory_description(subcategory: ServiceSubcategory) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        descriptions = {
            # Artistic
            ServiceSubcategory.DIALOGS: "üí¨ –î–∏–∞–ª–æ–≥–∏ –∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã",
            ServiceSubcategory.NATURE: "üåø –ü—Ä–∏—Ä–æ–¥–∞ –∏ –æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞",
            ServiceSubcategory.MUSIC: "üéµ –ú—É–∑—ã–∫–∞ –∏ –∑–≤—É–∫–∏",
            ServiceSubcategory.POETRY: "üìú –ü–æ—ç–∑–∏—è –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
            
            # Business
            ServiceSubcategory.AGREEMENTS: "ü§ù –î–æ–≥–æ–≤–æ—Ä—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è",
            ServiceSubcategory.LAWS: "‚öñÔ∏è –ó–∞–∫–æ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞",
            ServiceSubcategory.PRESENTATIONS: "üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –æ—Ç—á—ë—Ç—ã",
            ServiceSubcategory.NEGOTIATIONS: "üí∞ –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∏ —Å–¥–µ–ª–∫–∏",
            
            # Numbers
            ServiceSubcategory.ROUTES: "üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            ServiceSubcategory.PHONE_NUMBERS: "üìû –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤",
            ServiceSubcategory.STATISTICS: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            ServiceSubcategory.CALCULATIONS: "üßÆ –†–∞—Å—á—ë—Ç—ã –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è"
        }
        return descriptions.get(subcategory, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    
    @staticmethod
    def get_subcategories_by_category(
            category: ServiceCategory
    ) -> list[ServiceSubcategory]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        mapping = {
            ServiceCategory.ARTISTIC: [
                ServiceSubcategory.DIALOGS,
                ServiceSubcategory.NATURE,
                ServiceSubcategory.MUSIC,
                ServiceSubcategory.POETRY
            ],
            ServiceCategory.BUSINESS: [
                ServiceSubcategory.AGREEMENTS,
                ServiceSubcategory.LAWS,
                ServiceSubcategory.PRESENTATIONS,
                ServiceSubcategory.NEGOTIATIONS
            ],
            ServiceCategory.NUMBERS: [
                ServiceSubcategory.ROUTES,
                ServiceSubcategory.PHONE_NUMBERS,
                ServiceSubcategory.STATISTICS,
                ServiceSubcategory.CALCULATIONS
            ]
        }
        return mapping.get(category, [])