есть следующая задача: сервис на Питоне (асинхронная работа) + Телеграм бот (aiogram 3+ AigramDialogs) + БД Postrges + SQLAlchemy (mapped) + alembic + docker + .env файл + taskiq + rabbit и все остальные best practicies (разнести все по отдельным файлам/папкам, использовать мидлваре для проверки что человек зарегистрирован и т.п.): человек регистрируется в сервисе. есть возможность пополнить баланс. если баланс отрицательный, то воспользоваться услугой можно всего один раз в сутки (при повторном использовании писать что до бесплатного использования осталось xx часов). если баланс позволяет, то можно несколько раз. пополнение баланса через Юмани/Телеграм старс. получение услуги: пользователю предлагается прислать голосовое сообщение. дальше это сообщение как-то обрабатывается (может заниматься вплоть до минуты, поэтому нужно как-то сделать через очередь задач) и затем приходит ответ. вести в базе статистику запросов, ответов, баланса/пополнений. при выборе услуги есть несколько категорий/подкатегорий. например: художественная (диалоги, природа и т.п.), бизнес (договоренность, законы и т.п.), цифры (описание маршрута, номера телефонов и т.п.).  должна быть такая структура. voice_service/
├── .env.example
├── .gitignore
├── docker-compose.yml
├── Dockerfile
├── requirements.txt
├── alembic.ini
├── alembic/
│   ├── env.py
│   └── versions/
├── app/
│   ├── init.py
│   ├── main.py
│   ├── config.py
│   ├── database/
│   │   ├── init.py
│   │   ├── engine.py
│   │   ├── models.py
│   │   └── base.py
│   ├── bot/
│   │   ├── init.py
│   │   ├── handlers/
│   │   │   ├── init.py
│   │   │   ├── start.py
│   │   │   ├── registration.py
│   │   │   ├── balance.py
│   │   │   ├── service.py
│   │   │   └── payment.py
│   │   ├── keyboards/
│   │   │   ├── init.py
│   │   │   ├── inline.py
│   │   │   └── reply.py
│   │   ├── middlewares/
│   │   │   ├── init.py
│   │   │   ├── auth.py
│   │   │   └── throttling.py
│   │   ├── dialogs/
│   │   │   ├── init.py
│   │   │   ├── registration.py
│   │   │   ├── service_selection.py
│   │   │   └── payment.py
│   │   ├── states/
│   │   │   ├── init.py
│   │   │   ├── registration.py
│   │   │   ├── service.py
│   │   │   └── payment.py
│   │   └── filters/
│   │       ├── init.py
│   │       └── custom.py
│   ├── services/
│   │   ├── init.py
│   │   ├── user_service.py
│   │   ├── balance_service.py
│   │   ├── payment_service.py
│   │   ├── voice_service.py
│   │   └── statistics_service.py
│   ├── tasks/
│   │   ├── init.py
│   │   ├── broker.py
│   │   └── voice_processing.py
│   ├── utils/
│   │   ├── init.py
│   │   ├── constants.py
│   │   ├── validators.py
│   │   └── helpers.py
│   └── schemas/
│       ├── init.py
│       ├── user.py
│       ├── service.py
│       └── payment.py  
нужно реализовать следующие файлы:
из папки app/utils  - все:
из папки app/bot/dialogs - все:
из папки app/bot/filters - все:
из папки app/utils/ - все:
если нужен будет какой-то файл из уже имеющихся у меня других, запроси у меня и сброшу.